
// =================================	
// Kernels.
// =================================

#pragma kernel Perlin
#pragma kernel Perlin2
#pragma kernel Perlin3
#pragma kernel Perlin4
#pragma kernel Perlin5

#pragma kernel Simplex

#pragma kernel OctavePerlin
#pragma kernel OctavePerlin2
#pragma kernel OctavePerlin3

#pragma kernel OctaveSimplex

// =================================	
// Includes.
// =================================
			
#include "ParticleAffectorGPU-Common.cginc"

// =================================	
// Structs.
// =================================

// ...

// =================================	
// Variables.
// =================================

// ...

static const int perm[] = 
{ 
	151,160,137,91,90,15,
	131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,

	151,160,137,91,90,15,
	131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
};

// ...

float frequency;

int octaves;

float lacunarity;
float persistence;

float3 offsets;

// =================================	
// Functions.
// =================================

// ...

float3 smooth(float3 t)
{
	return t * t * (3.0 - 2.0 * t);
}
float3 smooth2(float3 t)
{
	return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

// 1D hash / random.

float hash(float x)
{
	return frac(sin(x) * 43758.5453);
}

// ...

float grad(int hash, float x, float y, float z)
{
	switch (hash & 0xF)
	{
		case 0x0: return x + y;
		case 0x1: return -x + y;
		case 0x2: return x - y;
		case 0x3: return -x - y;
		case 0x4: return x + x;
		case 0x5: return -x + x;
		case 0x6: return x - x;
		case 0x7: return -x - x;
		case 0x8: return y + x;
		case 0x9: return -y + x;
		case 0xA: return y - x;
		case 0xB: return -y - x;
		case 0xC: return y + z;
		case 0xD: return -y + x;
		case 0xE: return y - x;
		case 0xF: return -y - z;

		// Not executed.

		default: return 0.0;
	}
}

// ...

float perlin(float3 v)
{
	int3 i0, i1;
	float3 f0, f1;
	
	// Integer part (floor).

	i0 = floor(v);

	// Fractional part (v - floor).

	f0 = v - i0;

	// Fractional part minus one.    

	f1 = f0 - 1.0;

	// Wrap to 0...255.

	i1 = (i0 + 1) & 255;
	i0 &= 255;

	// Smooth / fade.

	float3 t = smooth2(f0);
	
	// Gradients.

	return  
			
			0.936f * lerp(
						
			lerp(

				lerp(grad(perm[i0.x + perm[i0.y + perm[i0.z]]], f0.x, f0.y, f0.z), grad(perm[i0.x + perm[i0.y + perm[i1.z]]], f0.x, f0.y, f1.z), t.z), 
				lerp(grad(perm[i0.x + perm[i1.y + perm[i0.z]]], f0.x, f1.y, f0.z), grad(perm[i0.x + perm[i1.y + perm[i1.z]]], f0.x, f1.y, f1.z), t.z), t.y),

			lerp(

				lerp(grad(perm[i1.x + perm[i0.y + perm[i0.z]]], f1.x, f0.y, f0.z), grad(perm[i1.x + perm[i0.y + perm[i1.z]]], f1.x, f0.y, f1.z), t.z), 
				lerp(grad(perm[i1.x + perm[i1.y + perm[i0.z]]], f1.x, f1.y, f0.z), grad(perm[i1.x + perm[i1.y + perm[i1.z]]], f1.x, f1.y, f1.z), t.z), t.y), t.x);
}

// Fast noise that replaces switches with with a direct hash 
// since GPU is better off computing rather than branching.

float perlin4(float3 v)
{
	int3 i0, i1;
	
	// Integer part (floor).

	i0 = floor(v);

	// Fractional part (v - floor).

	float3 fractional = v - i0;
	
	// Wrap to 0...255.

	i1 = (i0 + 1) & 255;
	i0 &= 255;

	// Smooth / fade.
	
	float3 t = smooth2(fractional);

	// Gradients.

	return  
			
			lerp(-1.0, 1.0, lerp(
						
			lerp(

				lerp(hash(perm[i0.x + perm[i0.y + perm[i0.z]]]), hash(perm[i0.x + perm[i0.y + perm[i1.z]]]), t.x), 
				lerp(hash(perm[i0.x + perm[i1.y + perm[i0.z]]]), hash(perm[i0.x + perm[i1.y + perm[i1.z]]]), t.x), t.y),

			lerp(

				lerp(hash(perm[i1.x + perm[i0.y + perm[i0.z]]]), hash(perm[i1.x + perm[i0.y + perm[i1.z]]]), t.x), 
				lerp(hash(perm[i1.x + perm[i1.y + perm[i0.z]]]), hash(perm[i1.x + perm[i1.y + perm[i1.z]]]), t.x), t.y), t.z));
}

// Even faster using a fixed offset in the hash.

// GPUs suck at branching, but at computation... they're wizards.
// Based off Inigo Quilez's implementation. 

float perlin3(float3 v)
{	
	// Integer part (floor).

	int3 floored = floor(v);		
	float n = dot(floored, floored);

	// Fractional part (v - floor).

	float3 fractional = v - floored;

	// Smooth / fade.
		
	float3 t = smooth(fractional);
	
	// Hash.

	static const float d = 57.0;

	static const float c1 = 0.0;
	static const float c2 = c1 + d;
	static const float c3 = c2 + d;
	static const float c4 = c3 + d;

	static const float inc = 1.0;

	return  
			
			lerp(-1.0, 1.0, lerp(
						
			lerp(

				lerp(hash(n + c1), hash(n + (c1 + inc)), t.x), 
				lerp(hash(n + c2), hash(n + (c2 + inc)), t.x), t.y),

			lerp(

				lerp(hash(n + c3), hash(n + (c3 + inc)), t.x), 
				lerp(hash(n + c4), hash(n + (c4 + inc)), t.x), t.y), t.z));
}

// Ultra-fast noise...

float perlin5(float3 v)
{	
	float3 floored = floor(v);
	float3 fractional = v - floored;

	float3 t = smooth(fractional);

	float n = dot(floored, floored);
	
	return  
			
			lerp(-1.0, 1.0, lerp(
						
			lerp(

				lerp(hash(n), hash(n), t.x), 
				lerp(hash(n), hash(n), t.x), t.y),

			lerp(

				lerp(hash(n), hash(n), t.x), 
				lerp(hash(n), hash(n), t.x), t.y), t.z));
}

/*

Copyright (C) 2011 by Ashima Arts (Simplex noise)
Copyright (C) 2011-2016 by Stefan Gustavson (Classic noise and others)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

float3 mod289(float3 x) 
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 mod289(float4 x)
 {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 permute(float4 x)
{
	 return mod289(((x * 34.0) + 1.0) * x);
}

float4 taylorInvSqrt(float4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

//
// GLSL textureless classic 3D noise "cnoise",
// with an RSL-style periodic variant "pnoise".
// Author:  Stefan Gustavson (stefan.gustavson@liu.se)
// Version: 2011-10-11
//
// Many thanks to Ian McEwan of Ashima Arts for the
// ideas for permutation and gradient selection.
//
// Copyright (c) 2011 Stefan Gustavson. All rights reserved.
// Distributed under the MIT license. See LICENSE file.
// https://github.com/stegu/webgl-noise
//

// Adapted to CG/HLSL by Mirza.

// Classic Perlin noise

float cnoise(float3 P)
{
	float3 Pi0 = floor(P); // Integer part for indexing
	float3 Pi1 = Pi0 + float3(1.0, 1.0, 1.0); // Integer part + 1

	Pi0 = mod289(Pi0);
	Pi1 = mod289(Pi1);

	float3 Pf0 = frac(P); // Fractional part for floaterpolation
	float3 Pf1 = Pf0 - float3(1.0, 1.0, 1.0); // Fractional part - 1.0

	float4 ix = float4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	float4 iy = float4(Pi0.yy, Pi1.yy);
	float4 iz0 = Pi0.zzzz;
	float4 iz1 = Pi1.zzzz;

	float4 ixy = permute(permute(ix) + iy);
	float4 ixy0 = permute(ixy + iz0);
	float4 ixy1 = permute(ixy + iz1);

	float4 gx0 = ixy0 * (1.0 / 7.0);
	float4 gy0 = frac(floor(gx0) * (1.0 / 7.0)) - 0.5;
	gx0 = frac(gx0);
	float4 gz0 = float4(0.5, 0.5, 0.5, 0.5) - abs(gx0) - abs(gy0);
	float4 sz0 = step(gz0, float4(0.0, 0.0, 0.0, 0.0));
	gx0 -= sz0 * (step(0.0, gx0) - 0.5);
	gy0 -= sz0 * (step(0.0, gy0) - 0.5);

	float4 gx1 = ixy1 * (1.0 / 7.0);
	float4 gy1 = frac(floor(gx1) * (1.0 / 7.0)) - 0.5;
	gx1 = frac(gx1);
	float4 gz1 = float4(0.5, 0.5, 0.5, 0.5) - abs(gx1) - abs(gy1);
	float4 sz1 = step(gz1, float4(0.0, 0.0, 0.0, 0.0));
	gx1 -= sz1 * (step(0.0, gx1) - 0.5);
	gy1 -= sz1 * (step(0.0, gy1) - 0.5);

	float3 g000 = float3(gx0.x,gy0.x,gz0.x);
	float3 g100 = float3(gx0.y,gy0.y,gz0.y);
	float3 g010 = float3(gx0.z,gy0.z,gz0.z);
	float3 g110 = float3(gx0.w,gy0.w,gz0.w);
	float3 g001 = float3(gx1.x,gy1.x,gz1.x);
	float3 g101 = float3(gx1.y,gy1.y,gz1.y);
	float3 g011 = float3(gx1.z,gy1.z,gz1.z);
	float3 g111 = float3(gx1.w,gy1.w,gz1.w);

	float4 norm0 = taylorInvSqrt(float4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	float4 norm1 = taylorInvSqrt(float4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;

	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, float3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, float3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, float3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, float3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, float3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, float3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);

	float3 fade_xyz = smooth2(Pf0);

	float4 n_z = lerp(float4(n000, n100, n010, n110), float4(n001, n101, n011, n111), fade_xyz.z);
	float2 n_yz = lerp(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = lerp(n_yz.x, n_yz.y, fade_xyz.x);
	 
	return 2.2 * n_xyz;
}

//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 

// Adapted to CG/HLSL by Mirza.

float snoise(float3 v)
{ 
	const float2  C = float2(1.0/6.0, 1.0/3.0) ;
	const float4  D = float4(0.0, 0.5, 1.0, 2.0);

	// First corner.

	float3 i  = floor(v + dot(v, C.yyy) );
	float3 x0 =   v - i + dot(i, C.xxx) ;

	// Other corners.

	float3 g = step(x0.yzx, x0.xyz);
	float3 l = 1.0 - g;

	float3 i1 = min( g.xyz, l.zxy );
	float3 i2 = max( g.xyz, l.zxy );

	//   x0 = x0 - 0.0 + 0.0 * C.xxx;
	//   x1 = x0 - i1  + 1.0 * C.xxx;
	//   x2 = x0 - i2  + 2.0 * C.xxx;
	//   x3 = x0 - 1.0 + 3.0 * C.xxx;

	float3 x1 = x0 - i1 + C.xxx;
	float3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
	float3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

	// Permutations.

	i = mod289(i); 
	float4 p = permute( permute( permute( 
				i.z + float4(0.0, i1.z, i2.z, 1.0 ))
			+ i.y + float4(0.0, i1.y, i2.y, 1.0 )) 
			+ i.x + float4(0.0, i1.x, i2.x, 1.0 ));

	// Gradients: 7x7 points over a square, mapped onto an octahedron.
	// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)

	float n_ = 0.142857142857; // 1.0/7.0
	float3  ns = n_ * D.wyz - D.xzx;

	float4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

	float4 x_ = floor(j * ns.z);
	float4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

	float4 x = x_ *ns.x + ns.yyyy;
	float4 y = y_ *ns.x + ns.yyyy;
	float4 h = 1.0 - abs(x) - abs(y);

	float4 b0 = float4( x.xy, y.xy );
	float4 b1 = float4( x.zw, y.zw );

	//float4 s0 = float4(lessThan(b0,0.0))*2.0 - 1.0;
	//float4 s1 = float4(lessThan(b1,0.0))*2.0 - 1.0;

	float4 s0 = floor(b0)*2.0 + 1.0;
	float4 s1 = floor(b1)*2.0 + 1.0;
	float4 sh = -step(h, float4(0.0, 0.0, 0.0, 0.0));

	float4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
	float4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

	float3 p0 = float3(a0.xy,h.x);
	float3 p1 = float3(a0.zw,h.y);
	float3 p2 = float3(a1.xy,h.z);
	float3 p3 = float3(a1.zw,h.w);

	//Normalise gradients
	float4 norm = taylorInvSqrt(float4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));

	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;

	// Mix final noise value
	float4 m = max(0.6 - float4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
	m = m * m;

	return 42.0 * dot(m * m, float4( dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));
}

// =================================	
// Kernels.
// =================================

// ...

[numthreads(12, 1, 1)]
void Perlin(uint3 id : SV_DispatchThreadID)
{	
	id_x = id.x; init();

	forceVec = float3
	(
		perlin((particlePosition + offsets.x) * frequency),
		perlin((particlePosition + offsets.y) * frequency),
		perlin((particlePosition + offsets.z) * frequency)
	);

	process();
}

// ...

[numthreads(12, 1, 1)]
void Perlin2(uint3 id : SV_DispatchThreadID)
{	
	id_x = id.x; init();

	forceVec = float3
	(
		cnoise((particlePosition + offsets.x) * frequency),
		cnoise((particlePosition + offsets.y) * frequency),
		cnoise((particlePosition + offsets.z) * frequency)
	);

	process();
}

// ...

[numthreads(12, 1, 1)]
void Perlin3(uint3 id : SV_DispatchThreadID)
{	
	id_x = id.x; init();

	forceVec = float3
	(
		perlin3((particlePosition + offsets.x) * frequency),
		perlin3((particlePosition + offsets.y) * frequency),
		perlin3((particlePosition + offsets.z) * frequency)
	);

	process();
}

// ...

[numthreads(12, 1, 1)]
void Perlin4(uint3 id : SV_DispatchThreadID)
{	
	id_x = id.x; init();

	forceVec = float3
	(
		perlin4((particlePosition + offsets.x) * frequency),
		perlin4((particlePosition + offsets.y) * frequency),
		perlin4((particlePosition + offsets.z) * frequency)
	);

	process();
}

// ...

[numthreads(12, 1, 1)]
void Perlin5(uint3 id : SV_DispatchThreadID)
{	
	id_x = id.x; init();

	forceVec = float3
	(
		perlin5((particlePosition + offsets.x) * frequency),
		perlin5((particlePosition + offsets.y) * frequency),
		perlin5((particlePosition + offsets.z) * frequency)
	);

	process();
}

// ...

[numthreads(12, 1, 1)]
void Simplex(uint3 id : SV_DispatchThreadID)
{	
	id_x = id.x; init();

	forceVec = float3
	(
		snoise((particlePosition + offsets.x) * frequency),
		snoise((particlePosition + offsets.y) * frequency),
		snoise((particlePosition + offsets.z) * frequency)
	);

	process();
}

// --------------------
// OCTAVE VARIANTS.
// --------------------

float octavePerlin(float3 v)
{
	if (octaves < 2)
	{
		return perlin(v * frequency);
	}
	else
	{
		float total = 0.0f;
		float amplitude = 1.0f;

		float max = 0.0f;

		for (int i = 0; i < octaves; i++)
		{
			total += perlin(v * frequency) * amplitude;

			max += amplitude;

			frequency *= lacunarity;
			amplitude *= persistence;
		}

		return total / max;
	}
}
float octavePerlin2(float3 v)
{
	if (octaves < 2)
	{
		return cnoise(v * frequency);
	}
	else
	{
		float total = 0.0f;
		float amplitude = 1.0f;

		float max = 0.0f;

		for (int i = 0; i < octaves; i++)
		{
			total += cnoise(v * frequency) * amplitude;

			max += amplitude;

			frequency *= lacunarity;
			amplitude *= persistence;
		}

		return total / max;
	}
}
float octavePerlin3(float3 v)
{
	if (octaves < 2)
	{
		return perlin3(v * frequency);
	}
	else
	{
		float total = 0.0f;
		float amplitude = 1.0f;

		float max = 0.0f;

		for (int i = 0; i < octaves; i++)
		{
			total += perlin3(v * frequency) * amplitude;

			max += amplitude;

			frequency *= lacunarity;
			amplitude *= persistence;
		}

		return total / max;
	}
}

// ...

float octaveSimplex(float3 v)
{
	if (octaves < 2)
	{
		return snoise(v * frequency);
	}
	else
	{
		float total = 0.0f;
		float amplitude = 1.0f;

		float max = 0.0f;

		for (int i = 0; i < octaves; i++)
		{
			total += snoise(v * frequency) * amplitude;

			max += amplitude;

			frequency *= lacunarity;
			amplitude *= persistence;
		}

		return total / max;
	}
}

// ...

[numthreads(12, 1, 1)]
void OctavePerlin(uint3 id : SV_DispatchThreadID)
{		
	id_x = id.x; init();

	forceVec = float3
	(
		octavePerlin(particlePosition + offsets.x),
		octavePerlin(particlePosition + offsets.y),
		octavePerlin(particlePosition + offsets.z)
	);

	process();
}

// ...

[numthreads(12, 1, 1)]
void OctavePerlin2(uint3 id : SV_DispatchThreadID)
{	
	id_x = id.x; init();

	forceVec = float3
	(
		octavePerlin2(particlePosition + offsets.x),
		octavePerlin2(particlePosition + offsets.y),
		octavePerlin2(particlePosition + offsets.z)
	);

	process();
}

// ...

[numthreads(12, 1, 1)]
void OctavePerlin3(uint3 id : SV_DispatchThreadID)
{	
	id_x = id.x; init();

	forceVec = float3
	(
		octavePerlin3(particlePosition + offsets.x),
		octavePerlin3(particlePosition + offsets.y),
		octavePerlin3(particlePosition + offsets.z)
	);

	process();
}

// ...

[numthreads(12, 1, 1)]
void OctaveSimplex(uint3 id : SV_DispatchThreadID)
{	
	id_x = id.x; init();

	forceVec = float3
	(
		octaveSimplex(particlePosition + offsets.x),
		octaveSimplex(particlePosition + offsets.y),
		octaveSimplex(particlePosition + offsets.z)
	);

	process();
}

// =================================	
// --END-- //
// =================================




